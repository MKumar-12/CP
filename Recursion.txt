Tail Recursion :
A fn. is said to be tail recursive if the last thing it does is calling itself.
[caller has nothing to do after calling its child]
i.e., 

    fun(n) {
        if(n == 0)  return;

        printf(n);
        fun(n-1);
    }

Tail recursive programs takes lesser time to execute.
i.e, caller's state is not reqd to be saved.They modify the code internally :

    fun(n) {
        start:
            if(n == 0)  return;

            printf(n);
            n = n-1;
        goto start;
    }

[Tail Call Elimination]


Convert to tail elimination :

    fun(n) {                                            //Initially pass k = 1;
        if(n == 0)  return;                             fun(n,k) { 
                                                        if(n == 0)  return;
        fun(n-1);                                       
        printf(n);                                      cout<<k;
    }                                                   fun(n-1,k+1);
                                                        }

Every non-tail recursive program cant be coverted to tail recursive

QS,Pre,In           tail recursive          (hence, faster)
MS,Postorder        NOT tail recursive


[NOT Tail Recursive]                                    [eqw. Tail Recursive]    
fact(n) {                                               //Initially pass k = 1;
    if(n==0 || n==1)                                    fact(int n, int k) {
        return 1;                                           if(n==0 || n==1)
    return n*fact(n-1);                                         return k;
}                                                           return(n-1, n*k);
                                                        }