{
	"cpp snippet":
  {
  "prefix": "Base template",
  "body": [
    "//$1",
    "//T.C. ",
    "//S.C. ",
    "",
    "#include<iostream>",
    "using namespace std;",
    "",
    "int main()",
    "{",
    "",
    "    return 0;",
    "}"
  ],
  "description": "C++ base"
  },

  "cpp snippet2" :
  {
    "prefix": "CP template",
    "body": [
      "//$1",
      "//T.C. ",
      "//S.C. ",
      "",
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "",
      "int main()",
      "{",
      "",
      "    return 0;",
      "}"
    ],
    "description": "C++ CP"  
  },

  "cpp snippet3" :
  {
    "prefix": "tree template",
    "body": [
      "//$1",
      "//T.C. ",
      "//S.C. ",
      "",
      "#include<iostream>",
      "#include<queue>",
      "using namespace std;",
      "",
      "class node {",
      "    public:",
      "        int data;",
      "        node* left;",
      "        node* right;",
      "    ",
      "    node(int d){",
      "        this->data = d;",
      "        this->left = NULL;",
      "        this->right = NULL;",
      "    }",
      "};",
      "",
      "int main()",
      "{",
      "    node* root = NULL;",
      "",
      "    return 0;",
      "}"
    ],
    "description": "C++ trees"  
  }, 
   
  "cpp snippet4": {
    "prefix": "array template",
    "body": [
      "//",
      "//T.C. ",
      "//S.C. ",
      "",
      "#include<iostream>",
      "using namespace std;",
      "",
      "int main()",
      "{",
      "    int n;",
      "    cout<<\"\\nEnter no. of elements : \";",
      "    cin>>n;",
      "    int arr[n];",
      "    cout<<\"\\nElements are : \";",
      "    for(int i = 0; i < n; i++)",
      "        cin>>arr[i];",
      "    return 0;",
      "}"
    ],
    "description": "C++ Arrays"
  },

  "cpp snippet5": {
    "prefix": "graph template",
    "body": [
      "//",
      "//T.C. ",
      "//S.C. ",
      "",
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "int n,e;",
      "",
      "class Graph {",
      "    public:",
      "        unordered_map<int,list<int>> adjList;",
      "        unordered_map<int,bool> visited;",
      "        unordered_map<int,int> parent;",
      "",
      "        //adds edge btw vertices u and v",
      "        void addEdge(int u, int v, bool dir) {",
      "            //dir = 1 -> directed graph",
      "            //dir = 0 -> undirected graph",
      "            adjList[u].push_back(v);",
      "",
      "            if(dir == 0)",
      "                adjList[v].push_back(u);",
      "        }",
      "",
      "        //printing adj. list",
      "        void printAdjList() {",
      "            cout<<\"\\n\\nAdj. list are as follows : \\n\";",
      "            for(auto i:adjList) {",
      "                cout<< i.first<< \" -> \";",
      "",
      "                for(auto j:i.second)",
      "                    cout<<j<<\", \";",
      "                ",
      "                cout<<endl;",
      "            }",
      "        }",
      "};",
      "",
      "int main()",
      "{",
      "    Graph g;",
      "    bool direction;",
      "    cout<<\"\\nEnter no. of vertices and edges : \";",
      "    cin>>n>>e;",
      "    cout<<\"\\nIs Graph directed? 1 yes 0 no : \"<<endl;",
      "    cin>>direction;",
      "    for(int i = 0; i<e; i++){",
      "        int u,v;",
      "        cout<<\"\\nEdge \"<<i+1<<\" is between nodes : \";",
      "        cin>>u>>v;",
      "        g.addEdge(u,v,direction);",
      "    }",
      "",
      "    g.printAdjList();",
      "    ",
      "    return 0;",
      "}"
    ],
    "description": "C++ Graphs"
  }
}


